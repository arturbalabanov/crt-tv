# A script to control the system volume as Kodi has its own volume control
# and there doesn't seem to be a way to use the system volume control instead

import argparse
import subprocess
import re

import xbmc

parser = argparse.ArgumentParser()
parser.add_argument("command", choices=["up", "down", "toggle_mute"])

args = parser.parse_args()


NEW_VOLUME_REGEX = re.compile(r"Mono:.*\[(?P<new_volume_perc>\d+)%\].*\[(?P<on_or_off>on|off)\]\s*$", flags=re.MULTILINE | re.IGNORECASE)

SUCCESS_NOTIFICATION_TIMEOUT_MS = 100
ERROR_NOTIFICATION_TIMEOUT_MS = 2000

def send_kodi_notification(message: str, *, error: bool = False) -> None:
    if error:
        message = "ERROR: {}".format(message)
        timeout_ms = ERROR_NOTIFICATION_TIMEOUT_MS
    else:
        timeout_ms = SUCCESS_NOTIFICATION_TIMEOUT_MS
        
    xbmc.executebuiltin('Notification(System Volume, {}, {})'.format(message, timeout_ms))


def change_volume(direction: str, step_perc: int) -> None:
    if direction == "up":
        change_sign = "+"
        change_str = "INCREASED"
    elif direction == "down":
        change_sign = "-"
        change_str = "DECREASED"
    else:
        raise RuntimeError("Invalid direction: {}".format(direction))
        
    result = subprocess.run(
        ["amixer", "set", "Headphone", "-M", "{}%{}".format(step_perc, change_sign)],
        check=False,
        capture_output=True,
    )

    if result.returncode != 0:
        send_kodi_notification("Failed to change volume", error=True)
        return
    
    notification_msg = "{} by {}%".format(change_str, step_perc)
    
    output_str = result.stdout.decode("utf-8")
    new_volume_match = NEW_VOLUME_REGEX.search(output_str)
    
    if new_volume_match:
        notification_msg += " to {}%".format(new_volume_match.group("new_volume_perc"))
    
    send_kodi_notification(notification_msg)

def toggle_mute_volume() -> None:
    result = subprocess.run(
        ["amixer", "set", "Headphone", "-M", "toggle"],
        check=False,
        capture_output=True,
    )

    if result.returncode != 0:
        send_kodi_notification("Failed to toggle mute", error=True)
        return

    output_str = result.stdout.decode("utf-8")
    
    new_volume_match = NEW_VOLUME_REGEX.search(output_str)
    
    if not new_volume_match:
        send_kodi_notification("Failed to parse mute status", error=True)
        return

    is_muted = new_volume_match.group("on_or_off") == "off"
    volume_perc = new_volume_match.group("new_volume_perc")
    
    if new_volume_match.group("on_or_off") == "off":
        notification_msg = "MUTED at {}".format(volume_perc)
    else:
        notification_msg = "UNMUTED at {}".format(volume_perc)
        
    send_kodi_notification(notification_msg)

if args.command == "up":
    change_volume("up", 10)
elif args.command == "down":
    change_volume("down", 10)
elif args.command == "toggle_mute":
    toggle_mute_volume()
else:
    raise RuntimeError("Invalid command: {}".format(args.command))
